/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NodeFind.java
 *
 * Created on Nov 11, 2011, 12:47:53 PM
 */

package edu.buffalo.cse.sneps3.gui;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

import edu.buffalo.cse.sneps3.gui.business.Term;
import edu.buffalo.cse.sneps3.gui.graph.ITermNode;

/**
 *
 * @author dan
 */
public class NodeFind extends javax.swing.JPanel {

    /** Creates new form NodeFind */
    public NodeFind() {
        initComponents();
    }

    protected boolean performOK(){
        Set<Term> nns = new HashSet<Term>();
        StringTokenizer st = new StringTokenizer(jTextField1.getText());
        String multiword = "";
        while(st.hasMoreTokens()){
            String s = st.nextToken();
            if(s.startsWith("\"")){
                multiword += s;
            }
            else if(!multiword.equals("")){
                multiword += " " + s;
                if(multiword.endsWith("\"")){
                	Term t = Term.getTerm(multiword.substring(1, multiword.length()-1));
                	if(t != null)
                		nns.add(t);
                	else{
                		JOptionPane.showMessageDialog(this, "Node with the label: " + multiword.substring(1, multiword.length()-1) + " was not found.");
                		return false;
                	}
                    //nns.add(multiword.substring(1, multiword.length()-1));
                    multiword = "";
                }
            }
            else if(Term.getTerm(s) != null) 
            	nns.add(Term.getTerm(s));
            else {
            	JOptionPane.showMessageDialog(this, "Node with the label: " + s + " was not found.");
            	return false;
            }
        }

        if(!multiword.equals("")){
            JOptionPane.showMessageDialog(this, "The multi-word term name: " + multiword + " is un-terminated.");
            return false;
        }

        if(GUI2.DEBUG) System.out.println("Node Find: " + nns);
        
        /*String fail;

        if(GUI2.getInstance().getGraphPanel().isShowingAll()){
            fail= GUI2.getInstance().getGraphPanel().displayOnlyNodeSet(nns);
        }
        else fail= GUI2.getInstance().getGraphPanel().displayNodeSet(nns);*/

        /*if(fail!= null){
            JOptionPane.showMessageDialog(this, "Nodes with the labels:" + fail + " were not found.");
            return false;
        }*/
        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jLabel1.setText("Show only node(s) with name(s):");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("You may enter a single node name or a space \nseparated list of node names.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
